Document 3: API & Data Contract Specification (tRPC Based) (Version 1.3)
File Name: docs/api-data-contract-v1.3.md
Version: 1.3
Date: June 8, 2025
Purpose: Defines the data contracts (TypeScript types/interfaces) and tRPC procedures for the RAG Chatbot Platform's API layer. This serves as the primary reference for frontend-backend interaction, ensuring type safety, and guiding AI-assisted development of both client-side calls and backend tRPC router implementations for an enhanced MVP supporting features like multiple prompts, diverse KB sources, widget configuration, and BYOK LLM key management.
Table of Contents
Overview
1.1. API Philosophy (tRPC First)
1.2. tRPC Setup Location
1.3. Data Validation (Zod)
1.4. Authentication & Authorization (NextAuth.js & tRPC Middleware)
1.5. Error Handling (tRPCError & Custom Codes)
Core Data Structures (TypeScript Types/Interfaces)
2.1. User & Enums (UserRole, UserStatus, AuthProvider)
2.2. Plan (for SaaS Tiers)
2.3. TenantSettings (for BYOK LLM Keys)
2.4. LLMApiKeyConfig & Enum (SupportedLLMProvider) (Input/Output for Key Management)
2.5. Bot & Enums/Types (RagConfigInput, RagConfigOutput, BotStatus)
2.6. BotPrompt
2.7. BotDocumentMetadata & Enums (DocumentSourceType, BotDocumentStatus)
2.8. WidgetConfig & WidgetConfigInput
2.9. Template & TemplateRagConfig
2.10. AnalyticsEntry (Conceptual)
2.11. PaginatedResponse (Generic Type)
tRPC Router Structure (Conceptual)
tRPC Procedures
4.1. auth Router (authRouter)
4.2. user Router (userRouter)
4.3. bot Router (botRouter)
4.4. botDocument Router (botDocumentRouter)
4.5. botPrompt Router (botPromptRouter)
4.6. widgetConfig Router (widgetConfigRouter)
4.7. ragQuery Router (ragQueryRouter)
4.8. template Router (templateRouter)
4.9. analytics Router (analyticsRouter)
4.10. admin Router (adminRouter)
Special Operations
5.1. File Uploads (to Cloudflare R2 via Presigned URLs - Expanded Types)
5.2. Real-time/Streaming Responses (for RAG Queries)
1. Overview
1.1. API Philosophy (tRPC First)
The primary API for the platform will be built using tRPC. This enables end-to-end type safety between the Next.js frontend and the backend logic, eliminating the need for manual synchronization of API contracts and reducing common integration errors. We prioritize developer experience and type safety.
1.2. tRPC Setup Location
tRPC routers will be defined in the backend and exposed via Next.js API routes (e.g., under /api/trpc/[trpc]). This co-location simplifies deployment with Vercel for the MVP. A standalone Node.js server (e.g., on Fly.io/Render) is a future option if API logic becomes very extensive or requires a different runtime environment.
1.3. Data Validation (Zod)
All input to tRPC procedures (mutations and queries requiring input) will be validated using Zod schemas. These Zod schemas also serve as the source of truth for the TypeScript types for the inputs, ensuring consistency.
1.4. Authentication & Authorization (NextAuth.js & tRPC Middleware)
Authentication will be managed primarily by NextAuth.js.
tRPC procedures will access the user's session information (including user ID and role) via tRPC context, which will be populated by NextAuth.js session data.
Protected Procedures: Most tRPC procedures will be "protected," meaning they require an authenticated user. This will be enforced using tRPC middleware that checks for a valid session in the context.
Role-Based Access: Specific procedures (e.g., admin procedures) will have further authorization checks based on user roles (e.g., ctx.session.user.role === 'ADMIN') within the procedure logic or specialized tRPC middleware.
1.5. Error Handling (tRPCError & Custom Codes)
tRPC has built-in error handling. Procedures will throw TRPCError instances with appropriate standard codes (e.g., BAD_REQUEST for Zod validation failures, UNAUTHORIZED, FORBIDDEN, NOT_FOUND, INTERNAL_SERVER_ERROR).
For more specific application-level feedback, custom string errorCodes (e.g., BOT_NOT_READY, INSUFFICIENT_CREDITS, API_KEY_INVALID, PROMPT_NAME_TAKEN, FILE_TYPE_NOT_SUPPORTED) can be included within the TRPCError.message or as a property of the error if a custom error formatter is used. This allows the client to provide more granular error messages or take specific actions.
2. Core Data Structures (TypeScript Types/Interfaces)
(These types align with Database Schema v1.3 and PRD v1.3. Zod schemas will be created to validate inputs corresponding to these types where applicable.)
2.1. User & Enums (UserRole, UserStatus, AuthProvider)
export type UserRole = 'USER' | 'ADMIN';
export type UserStatus = 'ACTIVE' | 'PENDING_VERIFICATION' | 'SUSPENDED';
export type AuthProvider = 'email' | 'google' | 'github'; // Extendable

export interface User {
  id: string; // UUID
  email: string | null;
  name: string | null;
  image?: string | null; // URL from OAuth provider
  authProvider: AuthProvider;
  role: UserRole;
  status: UserStatus;
  emailVerified: boolean;
  lastLoginAt?: Date | null;
  planId?: string | null; // UUID, FK to Plan table
  createdAt: Date;
  updatedAt: Date;
}
Use code with caution.
TypeScript
2.2. Plan (for SaaS Tiers)
export interface Plan {
  id: string; // UUID
  name: string; // e.g., 'Free', 'Basic', 'Pro'
  description?: string | null;
  priceMonthly?: number | null; // Representing decimal value
  maxBots: number;
  maxDocumentsPerBot: number;
  maxTotalDocumentStorageGB: number;
  maxQueriesPerMonth: number;
  maxDocProcessingJobsPerMonth: number;
  allowAdvancedRagConfig: boolean;
  isActive: boolean;
  createdAt: Date;
  updatedAt: Date;
}
Use code with caution.
TypeScript
2.3. TenantSettings (for BYOK LLM Keys - typically corresponds to a User)
export type SupportedLLMProvider = 'openai' | 'anthropic' | 'grok' | 'ollama'; // Extendable, matches DB enum

export interface TenantSettings {
  tenantId: string; // UUID, FK to User.id
  llmProvider?: SupportedLLMProvider | null;
  // llmApiKeyEncrypted is a DB-only field, not directly exposed via API for reading.
  // API procedures will handle setting/removing it.
  embeddingProvider?: SupportedLLMProvider | null; // If different from LLM
  // embeddingApiKeyEncrypted is a DB-only field.
  updatedAt: Date;
}
Use code with caution.
TypeScript
2.4. LLMApiKeyConfig & Enum (SupportedLLMProvider) (Input/Output for Key Management)
// SupportedLLMProvider enum is defined in 2.3

export interface LLMApiKeyConfigInput {
  provider: SupportedLLMProvider;
  apiKey: string; // User provides this for saving
}

export interface LLMApiKeyConfigOutput { // For API listing (never returns the actual key)
  provider: SupportedLLMProvider;
  isConfigured: boolean;
  lastTested?: Date | null; // Timestamp of last successful test
  statusMessage?: string; // e.g., "Validated successfully on [Date]", "Test Failed: Invalid Key", "Not configured"
}
Use code with caution.
TypeScript
2.5. Bot & Enums/Types (RagConfigInput, RagConfigOutput, BotStatus)
export interface RagConfigInput { // For creation/update input via API
  chunkSize?: number; // e.g., 200-2000
  overlap?: number;   // e.g., 0-200
  topK?: number;      // e.g., 1-10
}

export interface RagConfigOutput { // Stored in DB and returned by API
  chunkSize: number;
  overlap: number;
  topK: number;
}

export type BotStatus = 'CREATING' | 'PROCESSING_DOCUMENTS' | 'READY' | 'ERROR' | 'UPDATING';

export interface Bot {
  id: string; // UUID
  userId: string; // UUID (owner)
  name: string;
  description: string | null;
  publicUrlId: string; // Unique, URL-friendly public ID for chat links
  templateId?: string | null; // UUID
  ragConfig: RagConfigOutput;
  activePromptId?: string | null; // UUID of the active BotPrompt
  activeLlmConfigProvider: SupportedLLMProvider | null; // Which of user's BYOK configurations to use
  documentCount: number; // Denormalized or calculated for list views
  documents?: BotDocumentMetadata[]; // Populated only in detailed views (e.g., bot.byId)
  status: BotStatus;
  createdAt: Date;
  updatedAt: Date;
}
Use code with caution.
TypeScript
2.6. BotPrompt
export interface BotPrompt {
  id: string; // UUID
  botId: string; // UUID
  name: string;
  content: string; // The actual system prompt text
  isActive: boolean;
  createdAt: Date;
  updatedAt: Date;
}
Use code with caution.
TypeScript
2.7. BotDocumentMetadata & Enums (DocumentSourceType, BotDocumentStatus)
export type DocumentSourceType = 'FILE_UPLOAD' | 'MANUAL_TEXT' | 'JSON_STRUCTURED' | 'CSV_STRUCTURED'; // Extendable
export type BotDocumentStatus = 'PENDING' | 'PROCESSING' | 'PROCESSED' | 'FAILED';

export interface BotDocumentMetadata {
  id: string; // UUID
  botId: string; // UUID
  fileName: string; // User-defined name or actual file name for FILE_UPLOAD
  sourceType: DocumentSourceType;
  fileType?: string | null; // MIME type, applicable for FILE_UPLOAD
  fileSize?: number | null; // bytes, applicable for FILE_UPLOAD or calculated for text
  // storagePath is a backend detail, not typically exposed directly unless needed for client interaction
  status: BotDocumentStatus;
  errorMessage?: string | null;
  chunkCount?: number; // Populated after processing
  processedAt?: Date | null; // Populated after processing
  uploadedAt: Date; // Time of upload or manual creation
  updatedAt: Date;
}
Use code with caution.
TypeScript
2.8. WidgetConfig & WidgetConfigInput
export interface WidgetConfig {
  botId: string; // UUID, corresponds to Bot.id
  headerText: string; // Default: Bot Name
  primaryColor: string; // Default: Platform theme color (e.g., hex code like '#007bff')
  initialGreeting: string; // Default: "Hello! How can I help you today?"
  updatedAt: Date;
}

export interface WidgetConfigInput { // For updates via API
  botId: string; // UUID
  headerText?: string;
  primaryColor?: string; // Validated as hex color string
  initialGreeting?: string;
}
Use code with caution.
TypeScript
2.9. Template & TemplateRagConfig
export interface TemplateRagConfig {
  chunkSize: number;
  overlap: number;
  topK: number;
}

export interface Template {
  id: string; // UUID
  name: string;
  description: string;
  category?: string | null;
  defaultRagConfig: TemplateRagConfig;
  sampleSystemPrompt?: string | null;
  sampleQueries?: string[];
  iconUrl?: string | null;
  createdAt: Date;
  updatedAt: Date;
}
Use code with caution.
TypeScript
2.10. AnalyticsEntry (Conceptual)
export interface AnalyticsEntry {
  date: string; // 'YYYY-MM-DD' or ISO timestamp
  queryCount: number;
  avgResponseTimeMs?: number;
  positiveFeedbackRate?: number; // 0.0 to 1.0
  // Other metrics as needed
}
Use code with caution.
TypeScript
2.11. PaginatedResponse<T> (Generic Type)
export interface PaginatedResponse<T> {
  items: T[];
  meta: {
    totalItems: number;
    itemCount: number;
    itemsPerPage: number;
    totalPages: number;
    currentPage: number;
  };
  links?: {
    first?: string;
    previous?: string | null;
    next?: string | null;
    last?: string;
  };
}
Use code with caution.
TypeScript
3. tRPC Router Structure (Conceptual)
A main appRouter will combine sub-routers for different concerns:
// Server-side: trpc.ts (example structure)
// import { createTRPCRouter, publicProcedure, protectedProcedure } from './trpc-base';
// import { userRouter, botRouter, botDocumentRouter, botPromptRouter, widgetConfigRouter, /* ...etc */ } from './routers';

export const appRouter = createTRPCRouter({
  auth: authRouter,                     // Minimal, for session status
  user: userRouter,                     // Manages user profile, BYOK LLM keys, plan info
  bot: botRouter,                       // Manages core bot settings
  botDocument: botDocumentRouter,       // Manages knowledge base documents/sources for a bot
  botPrompt: botPromptRouter,           // Manages system prompts for a bot
  widgetConfig: widgetConfigRouter,     // Manages embeddable widget settings for a bot
  ragQuery: ragQueryRouter,             // Handles RAG queries and feedback
  template: templateRouter,             // Manages bot templates
  analytics: analyticsRouter,           // Provides analytics data
  admin: adminRouter,                   // Admin-specific functionalities
});

export type AppRouter = typeof appRouter; // Export type for client-side inference
Use code with caution.
TypeScript
4. tRPC Procedures
(Zod schemas will define inputs. Procedures are "Protected" if they require authentication.)
4.1. authRouter
auth.getSession (Query - Unprotected): Input: z.void(). Output: Session | null (NextAuth.js Session type). Description: Gets current session.
4.2. userRouter
user.me (Query - Protected): Input: z.void(). Output: User | null.
user.updateProfile (Mutation - Protected): Input: z.object({ name: z.string().optional(), image: z.string().url().optional() }). Output: User.
user.changePassword (Mutation - Protected): Input: z.object({ currentPassword: z.string(), newPassword: z.string().min(8) }). Output: { success: boolean, message?: string }.
user.setLlmApiKey (Mutation - Protected): Input: LLMApiKeyConfigInputZodSchema. Output: LLMApiKeyConfigOutput. (Securely saves/tests key).
user.removeLlmApiKey (Mutation - Protected): Input: z.object({ provider: z.nativeEnum(SupportedLLMProvider) }). Output: { success: boolean }.
user.listLlmApiKeys (Query - Protected): Input: z.void(). Output: z.array(LLMApiKeyConfigOutputZodSchema).
user.getCurrentPlan (Query - Protected): Input: z.void(). Output: Plan | null.
4.3. botRouter
bot.create (Mutation - Protected): Input: z.object({ name: z.string().min(1), description: z.string().optional(), templateId: z.string().uuid().optional(), ragConfig: RagConfigInputZodSchema.optional(), activeLlmConfigProvider: z.nativeEnum(SupportedLLMProvider) }). Output: Bot.
bot.list (Query - Protected): Input: Pagination/filter/sort Zod schema. Output: PaginatedResponse<Bot> (Bot has documentCount).
bot.byId (Query - Protected): Input: z.object({ id: z.string().uuid() }). Output: Bot | null (includes documents array).
bot.update (Mutation - Protected): Input: z.object({ id: z.string().uuid(), name: z.string().min(1).optional(), /* ...other updatable Bot fields from PRD v1.3 */ activeLlmConfigProvider: z.nativeEnum(SupportedLLMProvider).optional() }). Output: Bot.
bot.delete (Mutation - Protected): Input: z.object({ id: z.string().uuid() }). Output: { success: boolean }.
4.4. botDocumentRouter
botDocument.getUploadPresignedUrl (Mutation - Protected): Input: z.object({ botId: z.string().uuid(), fileName: z.string(), fileType: z.string() /* validate MIME */, fileSize: z.number().positive() }). Output: { uploadUrl: string, documentId: string, storagePath: string }.
botDocument.confirmUpload (Mutation - Protected): Input: z.object({ botId: z.string().uuid(), documentId: z.string().uuid(), storagePath: z.string(), fileSize: z.number().positive(), fileName: z.string(), fileType: z.string() }). Output: BotDocumentMetadata. (Triggers async processing).
botDocument.addManualText (Mutation - Protected): Input: z.object({ botId: z.string().uuid(), name: z.string().min(1).max(255), content: z.string().min(1) }). Output: BotDocumentMetadata. (Triggers async processing).
botDocument.listByBotId (Query - Protected): Input: z.object({ botId: z.string().uuid() }). Output: z.array(BotDocumentMetadataZodSchema).
botDocument.delete (Mutation - Protected): Input: z.object({ botId: z.string().uuid(), documentId: z.string().uuid() }). Output: { success: boolean }.
4.5. botPromptRouter (All Protected)
botPrompt.create (Mutation): Input: z.object({ botId: z.string().uuid(), name: z.string().min(1).max(100), content: z.string().min(1), setActive: z.boolean().optional().default(false) }). Output: BotPrompt.
botPrompt.listByBotId (Query): Input: z.object({ botId: z.string().uuid() }). Output: z.array(BotPromptZodSchema).
botPrompt.byId (Query): Input: z.object({ id: z.string().uuid() }). Output: BotPrompt | null.
botPrompt.update (Mutation): Input: z.object({ id: z.string().uuid(), name: z.string().min(1).max(100).optional(), content: z.string().min(1).optional() }). Output: BotPrompt.
botPrompt.setActive (Mutation): Input: z.object({ botId: z.string().uuid(), promptId: z.string().uuid() }). Output: { success: boolean }.
botPrompt.delete (Mutation): Input: z.object({ id: z.string().uuid() }). Output: { success: boolean }.
4.6. widgetConfigRouter (All Protected)
widgetConfig.getByBotId (Query): Input: z.object({ botId: z.string().uuid() }). Output: WidgetConfig.
widgetConfig.update (Mutation): Input: WidgetConfigInputZodSchema (e.g., z.object({ botId: z.string().uuid(), headerText: z.string().max(100).optional(), ... })). Output: WidgetConfig.
4.7. ragQueryRouter
ragQuery.streamQuery (Subscription or Query returning AsyncIterable - Protected): Input: z.object({ botId: z.string().uuid(), query: z.string().min(1), sessionId: z.string().uuid().optional() }). Output: Stream of structured chunks (text, sources, errors, end).
ragQuery.submitFeedback (Mutation - Protected): Input: z.object({ queryLogId: z.string().uuid(), rating: z.enum(['THUMBS_UP', 'THUMBS_DOWN']), comment: z.string().max(1000).optional() }). Output: { success: boolean }.
4.8. templateRouter (Unprotected for MVP)
template.list (Query): Input: Pagination/filter/sort Zod schema. Output: PaginatedResponse<Template>.
template.byId (Query): Input: z.object({ id: z.string().uuid() }). Output: Template | null.
4.9. analyticsRouter (Protected)
(Detailed input Zod schemas and output TypeScript types TBD based on specific analytics charts/data needs from PRD v1.3 and UI Design v1.3).
analytics.getOverview: Input: { dateRangePreset?: string, startDate?: Date, endDate?: Date }. Output: { totalQueries: number, avgResponseTime: number, ... }.
analytics.getBotSpecific: Input: { botId: string, dateRangePreset?: string, startDate?: Date, endDate?: Date }. Output: { queryTrend: AnalyticsEntry[], feedbackSummary: any, ... }.
4.10. adminRouter (Protected, Requires ADMIN Role)
admin.listUsers (Query): Input: Pagination/filter Zod schema. Output: PaginatedResponse<User>.
admin.updateUserRole (Mutation): Input: z.object({ userId: z.string().uuid(), role: z.nativeEnum(UserRole) }). Output: User.
admin.listAllBots (Query): Input: Pagination/filter Zod schema. Output: PaginatedResponse<Bot>.
5. Special Operations
5.1. File Uploads (to Cloudflare R2 via Presigned URLs - Expanded Types)
Client calls botDocument.getUploadPresignedUrl tRPC mutation with botId, fileName, fileType (PDF, TXT, DOCX, JSON, CSV, MD), fileSize.
Backend validates, creates BotDocumentMetadata (status PENDING, sourceType: 'FILE_UPLOAD'), generates R2 presigned upload URL, returns uploadUrl, documentId, storagePath.
Client uses the uploadUrl to upload the file directly to R2.
Client calls botDocument.confirmUpload tRPC mutation.
Backend verifies upload (optional), updates BotDocumentMetadata, triggers Inngest task.
5.2. Real-time/Streaming Responses (for RAG Queries)
The ragQuery.streamQuery tRPC procedure (or a Next.js Route Handler orchestrating it) will return a stream compatible with Vercel AI SDK's StreamingTextResponse or ideally experimental_StreamingReactResponse / readableStreamFromAsyncIterable to enable sending structured data objects (text chunks, source nodes, error objects, end-of-stream signals) for rich client-side rendering of the chat interaction.
